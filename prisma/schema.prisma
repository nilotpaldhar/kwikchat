generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

// The datasource configuration, defining the database connection.
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum to represent the theme options in user settings.
enum ThemeOptions {
  light
  dark
  system
}

// Enum to represent the status of a friend request
enum RequestStatus {
  pending
  accepted
  rejected
}

// The User model represents an application user.
model User {
  id            String    @id @default(cuid())
  name          String?
  displayName   String?
  email         String?   @unique
  username      String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  avatar        String?
  banner_color  String?   @default("#27AE80")
  bio           String?   @db.Text
  isOnline      Boolean   @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  lastSeen  DateTime?

  // One-to-many relationship with the Account model.
  accounts Account[]

  // One-to-one relationship with the UserSettings model.
  userSettings UserSettings?

  // One-to-one relationship with the TwoFactorConfirmation model.
  twoFactorConfirmation TwoFactorConfirmation?

  // One-to-many relationship for users that this user has blocked.
  blocking Block[] @relation("BlockingUser")

  // One-to-many relationship for users that have blocked this user.
  blockedBy Block[] @relation("BlockedUser")

  // One-to-many relationship representing friend requests sent by this user.
  sentRequests FriendRequest[] @relation("SentFriendRequests")

  // One-to-many relationship representing friend requests received by this user.
  receivedRequests FriendRequest[] @relation("ReceivedFriendRequests")

  // Many-to-many relationship representing the user's friends.
  friends Friendship[] @relation("UserFriends")

  // Many-to-many relationship representing users who have this user as a friend.
  friendOf Friendship[] @relation("FriendUsers")
}

// The Account model represents external accounts connected to a user.
model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to the User model.
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// The UserSettings model represents settings associated with a user.
model UserSettings {
  id               String       @id @default(cuid())
  colorTheme       ThemeOptions @default(light)
  twoFactorEnabled Boolean      @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to the User model.
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// The VerificationToken model represents tokens used for email verification.
model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// The PasswordResetToken model represents tokens used for password reset.
model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// The TwoFactorToken model represents tokens used for two-factor authentication.
model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  otp     String   @unique
  expires DateTime

  @@unique([email, otp])
}

// The TwoFactorConfirmation model represents confirmation of two-factor authentication.
model TwoFactorConfirmation {
  id String @id @default(cuid())

  // Relation to the User model.
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// The Block model represents a block action between two users.
model Block {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relation to the blocking user.
  blockerId String
  blocker   User   @relation("BlockingUser", fields: [blockerId], references: [id], onDelete: Cascade)

  // Relation to the blocked user.
  blockedId String
  blocked   User   @relation("BlockedUser", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
}

// The FriendRequest model represents a friend request sent from one user to another.
model FriendRequest {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  status    RequestStatus @default(pending)

  // The relationship between the sender and the FriendRequest model.
  senderId String
  sender   User   @relation("SentFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)

  // The relationship between the receiver and the FriendRequest model.
  receiverId String
  receiver   User   @relation("ReceivedFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade)

  // Ensures that a user cannot send multiple friend requests to the same receiver.
  @@unique([senderId, receiverId])
}

// The Friendship model represents a friendship connection between two users.
model Friendship {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // The reference to the User model, representing the user who is part of the friendship.
  userId String
  user   User   @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)

  // The reference to the User model, representing the friend in the friendship.
  friendId String
  friend   User   @relation("FriendUsers", fields: [friendId], references: [id], onDelete: Cascade)

  // Ensures that a friendship between the same two users can only exist once.
  @@unique([userId, friendId])
}
